@model CardCollection

<button id="add-file-btn" type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addModal">Add File</button>

<button id="create-card-btn" type="button" class="btn btn-success">Create Card</button>

<button id="edit-file-btn" type="button" class="btn btn-primary">Edit File</button>

<button id="remove-file-btn" type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete File</button>

<div id="collection-title-container">
    <img id="collection-edit" src="/images/edit.png" class="edit-button invert-icon" alt="edit">
    <img id="collection-save" src="/images/save.png" class="invert-icon" alt="save">
    <input id="collection-title" value="@Model.Name" readonly />
</div>


<div id="file-nav">
    <!--_TabsPartial-->
</div>

<div id="carousel-container">
    <!--_FilePartial-->
</div>

<div id="card-nav">
</div>

<!-- Add Modal -->
<div class="modal fade bg-dark text-light" id="addModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Create a new file</h5>
                <button type="button" class="btn-close text-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="create-file-form" action="@Url.Action("CreateFile", "CardCollection")" method="post">
                    <div class="form-group">
                        <label for="file-name" class="col-form-label">Name your file:</label>
                        <input type="text" class="form-control bg-dark text-light" id="file-name" name="name">
                    </div>
                    <input type="hidden" name="parentCollectionId" value="@Model.Id" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary text-light" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary text-light" form="create-file-form">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal-->
<div class="modal fade bg-dark text-light" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Edit file</h5>
                <button type="button" class="btn-close text-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-file-form">
                    <div class="form-group">
                        <label for="edit-file-name" class="col-form-label">Update your file name:</label>
                        <input type="text" class="form-control bg-dark text-light" id="edit-file-name" name="name">
                    </div>
                    <input type="hidden" name="fileId" value="" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary text-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary text-light" id="save-changes-btn">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!--Delete Dialog-->

<div class="modal fade bg-dark text-light" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header bg-dark text-light">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close text-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body bg-dark text-light">
                Are you sure you want to delete this collection?
            </div>
            <div class="modal-footer bg-dark text-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            loadFiles(@Model.Id);
            var originalTitle = $("#collection-title").val();
            var enterPressed = false;

            // Create File
            $("#create-file-form").submit(function (event) {
                event.preventDefault(); // Prevent form from submitting the traditional way

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CreateFile", "CardCollection")",
                    data: $(this).serialize(),
                    success: function () {
                        // Refresh list of files
                        loadFiles(@Model.Id);
                        $("#addModal").modal('hide');
                    },
                    error: function (error) {
                        alert("An error occurred.");
                        console.error("An error occurred:", error);
                    }
                });
            });

            // File Tab click event
            $('#file-nav').on('click', '.file-tab', function (e) {
                // Remove the active class from any other tabs
                $(".file-tab").removeClass("active-file-tab");

                // Add the active class to the clicked tab
                $(this).addClass("active-file-tab");

                // Fetch and display the index cards for the selected file
                var fileId = $(this).data("file-id");
                loadCards(fileId);
            });

            // Create Card
            $("#create-card-btn").click(function () {
                // Check if there's an active file tab
                var activeTab = $(".file-tab.active-file-tab");
                if (activeTab.length === 0) {
                    alert("Please select a file first.");
                    return;
                }

                // If blank card already exists, make it active item in the carousel
                if ($('#carousel .blank-card').length > 0) {
                    $('#carousel .carousel-item.active').removeClass('active');
                    $('#carousel .carousel-item:last').addClass('active');
                    return;
                }

                // If no blank card exists, append one to the end
                var blankCardHtml = `
                            <div class="carousel-item blank-card">
                                <div class="index-card">
                                    <input type="text" class="card-title" placeholder="Card Title">
                                    <img src="/images/close.png" class="close-button" alt="close">
                                    <img src="/images/save.png" class="save-button" alt="save">
                                    <textarea class="card-body" placeholder="Card Body"></textarea>
                                </div>
                            </div>`;

                $('#carousel .carousel-inner').append(blankCardHtml);
                $('#carousel .carousel-item.active').removeClass('active');
                $('#carousel .carousel-item:last').addClass('active');
            });

            // Save Card
            $(document).on('click', '.save-button', function () {
                var cardElement = $(this).closest('.index-card');
                var cardTitle = cardElement.find('.card-title').val();
                var cardBody = cardElement.find('.card-body').val();

                // Retrieve the file ID from the active tab
                var activeTab = $(".file-tab.active-file-tab");
                if (activeTab.length === 0) {
                    alert("Please select a file first.");
                    return;
                }
                var fileId = activeTab.data("file-id");

                // Check if carousel-item div has a data-id attribute
                var cardId = $(this).closest('.carousel-item').data('id');

                if (cardId) {
                    // Card has an ID, so update it
                    updateCardInFile(cardId, cardTitle, cardBody, fileId);
                } else {
                    // Card does not have an ID, so create a new one
                    createCardInFile(cardTitle, cardBody, fileId);
                }
            });

            // Card Navigation Item click event
            $(document).on('click', '.card-nav-item', function () {
                var cardIndex = $(this).data('index');  // Retrieve the associated card carousel index

                // Use Bootstrap's carousel method to navigate to the specific item
                $('#carousel').carousel(parseInt(cardIndex));
            });

            $("#collection-edit").click(function () {
                var titleInput = $("#collection-title");
                titleInput.prop("readonly", false); // Remove readonly property
                titleInput.focus(); // Focus the input

                $(this).hide(); // Hide the edit icon
                $("#collection-save").show();
            });

            // Enter key also saves collection title
            $("#collection-title").on("keypress", function (e) {
                if (e.which == 13) { // Check if the key is the Enter key
                    e.preventDefault(); // Prevent default action
                    enterPressed = true;
                    originalTitle = $(this).val();
                    performUpdate();
                }
            });

            // Collection Save click event
            $(document).on('mousedown', '#collection-save', function () {
                enterPressed = true;
                originalTitle = $('#collection-title').val();
                performUpdate();
            });

            $("#collection-title").blur(function () {
                if (!enterPressed) {
                    $(this).val(originalTitle);  // Reset to original value if Enter was not pressed
                }
                enterPressed = false;  // Reset for the next blur event
            });

            // Places the cursor at the end of the word on focus
            $("#collection-title").on('focus', function () {
                var value = $(this).val();
                $(this).val('');
                $(this).val(value);
            });

            // Edit Modal trigger
            $("#edit-file-btn").click(function () {
                var activeTabId = getActiveTabId();

                if (!activeTabId) {
                    alert("Please select a file to edit.");
                    return;
                }

                // Populate the edit input with the active tab's name
                var activeTabName = $(".file-tab.active-file-tab").text().trim();
                $("#edit-file-name").val(activeTabName);
                $("#edit-file-name").focus();

                // Show the edit modal
                $("#editModal").modal('show');
            });

            // Save file name changes
            $("#save-changes-btn").click(function () {
                e.preventDefault();
                updateFile();
            });

            // Delete Card
            $(document).on('click', '.delete-icon', function () {
                var card = $('#carousel .carousel-item.active');
                var cardId = card.data('id');  
                deleteCard(cardId, getActiveTabId());
            });

            // Delete File click event
            $("#confirm-delete").click(function () {
                if (getActiveTabId() > 0) {
                    deleteFile(getActiveTabId());
                    $('#deleteModal').modal('hide');
                }
                else {
                    alert("Please select a file.")
                    $('#deleteModal').modal('hide');
                }
            });

            $("#edit-file-form").submit(function (e) {
                e.preventDefault(); // prevent the default submit action
                updateFile();
            });

            $("#editModal").on('shown.bs.modal', function () {
                $("#edit-file-name").focus();
            });

            initializeCarousel(); // Might not be necessary
        });

        function updateFile() {
            var activeTab = $(".file-tab.active-file-tab");
            var activeTabId = getActiveTabId();

            if (!activeTabId) {
                alert("Please select a file to edit.");
                $("#editModal").modal('hide');
                return;
            }

            var updatedFileName = $("#edit-file-name").val(); // Get the new name from the modal

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateFile", "CardCollection")",
                data: {
                    id: activeTabId,
                    name: updatedFileName
                },
                success: function (response) {
                    $("#editModal").modal('hide');
                    activeTab.text(updatedFileName); // Updates the tab's name
                    activeTab.css("overflow", "hidden");
                    activeTab.css("text-overflow", "ellipsis");
                },
                error: function (error) {
                    alert("There was an error updating the file.");
                }
            });
        }

        // Update card
        function performUpdate() {
            updateCollectionName(@Model.Id);
            $("#collection-save").hide();
            $("#collection-edit").show();
            $("#collection-title").prop("readonly", true);
            enterPressed = false;
        }

        function updateCollectionName(collectionId) {
            // Get the updated collection name
            var updatedName = $("#collection-title").val();

            // Send AJAX request to update the field on your server
            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateCollection", "CardCollection")",
                data: {
                    Id: collectionId,
                    Name: updatedName
                },
                success: function (data) {
                    // Success reflected in name change
                },
                error: function () {
                    alert("An error occurred. Please try again later.");
                }
            });
        }


        function createCardInFile(cardTitle, cardBody, fileId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("CreateCard", "CardCollection")",
                data: {
                    title: cardTitle,
                    body: cardBody,
                    fileId: fileId
                }, // Pass card information to server
                success: function (data) {
                    loadCards(fileId)
                },
                error: function (xhr, status, error) {
                    console.error("Error creating card:", xhr.responseText);
                }
            });
        }

        function loadCards(fileId) {
            $.ajax({
                type: "GET",
                url: "/CardCollection/GetFilePartial",
                data: { fileId: fileId }, // Pass fileId to server
                success: function (data) {
                    $('#carousel-container').html(data); // Inserts card partial into carousel container
                    initializeCarousel();

                    // Extract titles and populate the list
                    let titles = [];
                    $('#carousel-container .card-title').each(function () {
                        titles.push($(this).val());
                    });
                    populateTitleList(titles);
                    setNavActiveCard();
                },
                error: function () {
                    alert('An error occurred while loading the cards. Please try again.');
                }
            });
        }

        function loadFiles(collectionId) {
            $.ajax({
                type: "GET",
                url: "/CardCollection/GetTabsPartial",
                data: { collectionId: collectionId },
                success: function (data) {
                    $("#file-nav").html(data);

                    // Find the last tab and make it active
                    $(".file-tab:last").addClass("active-file-tab");
                    var fileId = $(".file-tab:last").data("file-id");
                    loadCards(fileId);
                },
                error: function () {
                    alert("An error occurred while loading files. Please try again.");
                }
            });
        }

        function populateTitleList(titles) {
            var index = 0;
            let $titleList = $('#card-nav');
            $titleList.empty(); // Clear any existing titles

            titles.forEach(title => {
                $titleList.append(`
                <div class="card-nav-item" data-index="${index}">
                    <div class="title-text">${title}</div>
                    <img src="/images/delete.png" class="delete-icon" alt="Delete">
                </div>`);
                index++;
            });

        }

        // Since the carousel is a partialView inserted later we need
        // to initialize the event functions after the carousel starts existing
        function initializeCarousel() { 
            $('#carousel').on('slid.bs.carousel', function () {
                console.log("Carousel slid event triggered");
                setNavActiveCard()
            });

            $(".card-edit").click(function () {
                console.log("Card edit btn triggered");
                editCard(this);
            });

            $(".card-close").click(function () {
                console.log("Card close btn triggered");
                cancelEditCard(this);
            });
        }

        // Makes sure the card nav matches the carousels active item
        function setNavActiveCard() {
            let currentIndex = $('#carousel .carousel-item.active').data('index');  // Get active carousel item's index

            var activeNavItems = $('.card-nav-item.active')
            activeNavItems.find('.delete-icon').hide(); // Hide delete icon
            activeNavItems.removeClass('active');  // Remove active class from any navigation item
            
            var matchingNavItem = $(`.card-nav-item[data-index="${currentIndex}"]`);
            matchingNavItem.addClass('active');
            var deleteIcon = $(matchingNavItem).find('.delete-icon');
            deleteIcon.show();
        }

        function getActiveTabId() {
            return $(".file-tab.active-file-tab").data("file-id");
        }

        // Change UI buttons to save and close/enable text inputs
        function editCard(clickedElement) {
            let card = $(clickedElement).closest('.index-card');

            card.find(".card-edit").hide();
            card.find(".card-save").removeAttr("hidden");
            card.find(".card-close").removeAttr("hidden");
            card.find(".card-save").show();
            card.find(".card-close").show();
            card.find(".card-title").prop("disabled", false);
            card.find(".card-body").prop("disabled", false);
            card.find(".card-title").css("cursor", "text");
        }

        // Change UI buttons back to edit/disable text inputs
        function cancelEditCard(clickedElement) {
            let card = $(clickedElement).closest('.index-card');

            card.find(".card-edit").show();
            card.find(".card-save").hide();
            card.find(".card-close").hide();
            card.find(".card-title").prop("disabled", true);
            card.find(".card-body").prop("disabled", true);
            card.find(".card-title").css("cursor", "default");
        }

        // Update card to reflect changes
        function updateCardInFile(cardId, cardTitle, cardBody, fileId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateCard", "CardCollection")",
                data: {
                    id: cardId,
                    title: cardTitle,
                    body: cardBody,
                    fileId: fileId
                },
                success: function (data) {
                    loadCards(fileId) // Reload cards
                },
                error: function (xhr, status, error) {
                    console.error("Error updating card:", xhr.responseText);
                }
            });
        }

        // Delete card function
        function deleteCard(cardId, fileId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteCard", "CardCollection")",
                data: {
                    id: cardId
                },
                success: function (data) {
                    loadCards(fileId); // reload list of cards after deletion
                },
                error: function () {
                    alert("An error occurred. Please try again later.");
                }
            });
        }

        //Delete file function
        function deleteFile(fileId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("DeleteFile", "CardCollection")",
                data: {
                    id: fileId
                },
                success: function (data) {
                    // Refresh the current page
                    location.reload();
                },
                error: function () {
                    alert("An error occurred. Please try again later.");
                }
            });
        }

    </script>
}